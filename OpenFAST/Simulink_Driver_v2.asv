% Simulink Driver

% Written By: Ian Ammerman
% Written: 7/12/23

close all; 
clear all;
clc;

%% ---------- USER INPUTS ---------- %%
% Simulation time
sim_time = 500;

% Simulation source information
sim_name = 'Test_01'
HD_mod = 'DT1_HD';
Platform_mod = 'DT1_Locked_Platform';
output_model = 'DT1_Locked_Platform_out';
wave_elevation = 'Test_01_fixed.Elev'
simulink_model = 'Linear_wObserver'
%%% --- END USER INPUTS --- %%%

%% ---------- DRIVER SETUP --------- %%
% Directories
home_dir = 'C:\Umaine Google Sync\GitHub\FOCAL-C2-Linearization\OpenFAST';
sim_dir  = sprintf('Simulations/%s',sim_name);
HD_dir = sprintf('Models/%s',HD_mod);
Platform_dir = sprintf('Models/%s',Platform_mod);
out_dir = sprintf('Models/%s',output_model);

% Check if home - if not, go there
isHome = strcmp(cd,home_dir);
if isHome ~= 1
    cd(home_dir);
end
%%% --------------------------_---- %%%

%% ---------- Load State-Space Models ---------- %%
%%% ---------- Load HydroDyn Model ---------- %%%
cd(HD_dir); 
load("DT1_A");
load("DT1_B");
load("DT1_C");
load("DT1_D");
load("DT1_ss_data.mat")

% load("CCT9_LC34_A");
% load("CCT9_LC34_B");
% load("CCT9_LC34_C");
% load("CCT9_LC34_D");
% load("CCT9_LC34_ss_data.mat")

% Define model
A_HD = A; B_HD = B; C_HD = C; D_HD = D;
HD_op = SS_data.y_op;
for i = 1:length(HD_op);
    HD_FOP(i) = HD_op{i};
end
HD_FOP = zeros(size(HD_FOP));

cd(home_dir); 
%%% ----------Load Platform Model ---------- %%%
cd(Platform_dir);
load("DT1_A");
load("DT1_B");
load("DT1_C");
load("DT1_D");
load("DT1_ss_data.mat")

% load("CCT9_LC34_A");
% load("CCT9_LC34_B");
% load("CCT9_LC34_C");
% load("CCT9_LC34_D");
% load("CCT9_LC34_ss_data.mat")

% ---------- REARRANGE STATES ORDER ---------- %
new_order = [4,5,11,12,13,14,15,1,2,3,6,7,8,9,10,16,17,18,19,20]';

for i = 1:length(new_order)
    row = new_order(i);

    Anew(i,:) = A(row,:);
    Bnew(i,:) = B(row,:);

end

% Define C matrix
Cnew = eye(length(new_order));
Cnew(8:end,:) = zeros(size(Cnew(8:end,:)));

% Define empty D matrix
Dnew = zeros(size(B));

% Define Model
A_platform = Anew;
B_platform = Bnew;
C_platform = Cnew;
D_platform = Dnew;

cd(home_dir)
%% %%% ---------- Load Output Model --------- %%%
cd(out_dir)

% load("DT1_C.mat");
% load("DT1_ss_data.mat")

C_out = C_platform;

% % C_out = eye(18);
% % C_out(4,4) = 57.3; % Convert roll to degrees
% % C_out(5,5) = 57.3; % Convert pitch to degrees

cd(home_dir);

%% ---------- Load Wave Information ---------- %%
% cd('Wave_Files');
% wave = readmatrix(wave_elevation,'FileType','text');
% time = wave(:,1);
% index = dsearchn(time,sim_time); % Only take up to sim_time
% trunc_wave = wave(1:index,:); % trim time vetor
% time = trunc_wave(:,1);
% cd(home_dir)

%% ---------- OBSERVER VALUES ---------- %%
% Compute observer gain matrix
At = transpose(A_platform);
Ct = transpose(C_platform);

sys = ss(A_platform,B_platform,C_platform,D_platform);

poles_old = pole(sys);
poles_new = 10*real(poles_old)-10;

L_platform = transpose(place(At,Ct,poles_new));
% L_platform = zeros(size(L_platform));

%% Format Simulink Inputs
% NOTE: Initial conditions defined in user inputs section
cd(sim_dir);

% Specify initial conditions
IC = zeros(1,333);
% IC(2) = -3.16; % surge

% Plant simulation
load('Test_Results.mat');
fields = {'PtfmRoll','PtfmPitch','TwrBsMyt','TwrBsMxt','T_1_','T_2_','T_3_'};
conversion = [1,1,10^-3,10^-3,1,1,1];
addgain = [0,0.015,-10^5,0,0,0,0]

Plant = zeros(length(test_results.Time),length(fields)+1);
Plant(:,1) = test_results.Time;
index = dsearchn(test_results.Time,100);
for i = 1:length(fields);
    var = test_results.(fields{i})*conversion(i);
    var = smoothdata(var,'gaussian');
    var = var - mean(var(1:index));
    Plant(:,i+1) = var;
end

% Wave Elevation
wave_time = test_results.Time;
wave_eta = test_results.Wave1Elev;

index = dsearchn(wave_time,sim_time);

wave_time = wave_time(1:index);
wave_eta = wave_eta(1:index);

trunc_wave = [wave_time,wave_eta];
HD_input = trunc_wave;

cd(home_dir)
%% ---------- Run Simulink Model --------- %% 
cd('Models/Simulink');
simulation_output = sim(simulink_model,'StartTime',...
    '0','StopTime',num2str(sim_time));
cd(home_dir);

%% ---------- Extract Output Data & Field Names ---------- %%
% Output data & state names
sim_out = simulation_output.platform_out;
t_out = simulation_output.tout;

% out_state_names = {'Time','PtfmSurge','PtfmSway','PtfmHeave','PtfmRoll','PtfmPitch','PtfmYaw',...
%                    'TwrBsMyt','TwrBsMxt','TTDspFA','TTDspSS','FAIRTEN1','FAIRTEN2','FAIRTEN3'};

%%% ---------- Auto-Detect Output Names ---------- %%%
% y_desc = SS_data.y_desc;
% string_new = cell(height(y_desc),3);
% for i = 1:height(y_desc)
%     string = y_desc{i};
%     string_new = strsplit(string);
% 
%     state_name = string_new(2);
%     state_name = strrep(state_name,',',''); % remove commas from names
%     state_name = strrep(state_name,'[','');
%     state_name = strrep(state_name,']','');
%     out_state_names(1,i) = state_name;
% end
% out_state_names = horzcat({'Time'},out_state_names);
%%% ---------------------------------------------- %%%

out_state_names = {'Time','PtfmRoll','PtfmPitch','SurgeVel','SwayVel','HeaveVel','RollVel','PitchVel','PtfmSurge','PtfmSway','PtfmHeave','PtfmYaw','TwrFA1','TwrSS1','TwrFA2','TwrSS2','YawVel','TwrFA1Vel','TwrSS1Vel','TwrFA2Vel','TwrSS2Vel'};


% out_state_names = {'Time','PtfmRoll','PtfmPitch','PtfmSurge','PtfmSway','PtfmHeave','TTFA1','TTSS1','TTFA2','TTSS2',...
%                    'SurgeVel','SwayVel','HeaveVel','RollVel','PitchVel','TTFA1vel','TTSS1vel','TTFA2vel','TTSS2vel'};
% out_state_names = {'Time','PtfmRoll','PtfmPitch','PtfmTAxi','PtfmTAyi','PtfmTAzi','TwrBsMxt','TwrBsMyt','TwrBsMzt','T_1_','T_2_','T_3_'}

% out_state_names = {'Surge','Sway','Heave','Roll','Pitch','Yaw'};

%% --------- Process Output Data ---------- %%
% Load data into variable
for i = 1:size(sim_out.Data,2);
    data_out(:,i) = sim_out.Data(:,i);
end

% % Add operating point to output
% op = cell2mat(SS_data.y_op);
% for i = 1:width(data_out)
%     op_val = op(i);
%     data_out(:,i) = data_out(:,i) + op_val;
% end

% Center around zero
for i = 1:width(data_out)
    data_out(:,i) = rMean(data_out(:,i));
end

%% ---------- Store/Save Output Data Structure ---------- %%
cd(sim_dir);

simulink_results = [t_out,data_out];

for i = 1:length(out_state_names);
    out_structure.(out_state_names{i}) = simulink_results(:,i);
end

slx_obs_results = out_structure;

% Save output to file
save('SimulinkObserver_Results',"slx_obs_results");

